package actions

import (
	"crowddefensewebsite/models"
	"fmt"
	"log"
	"strconv"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Idea)
// DB Table: Plural (ideas)
// Resource: Plural (Ideas)
// Path: Plural (/ideas)
// View Template Folder: Plural (/templates/ideas/)

// IdeasResource is the resource for the Idea model
type IdeasResource struct {
	buffalo.Resource
}

// List gets all Ideas. This function is mapped to the path
// GET /ideas
func (v IdeasResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	for _, statement := range []string{"state-gameplay", "state-gamelooks", "state-voting", "state-website"} {
		val, err := redisClient.Get(statement).Result()
		if err != nil {
			log.Print(err)
		}
		c.Set(statement, val)
	}

	ideas := &models.Ideas{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".

	page, _ := strconv.Atoi(c.Param("page"))

	q := tx.Paginate(page, 8)

	q.Where("fullfilled != true")
	q.Where("picked != true")

	// currentVersion, err := redisClient.Get("game-currentversion").Result()
	// 	if err != nil {
	// 		log.Print(err)
	// 	}

	q.Order("JSON_LENGTH(upvoted_by) - JSON_LENGTH(downvoted_by) DESC")

	// Retrieve all Ideas from the DB
	if err := q.All(ideas); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, ideas))
}

// Show gets the data for one Idea. This function is mapped to
// the path GET /ideas/{idea_id}
func (v IdeasResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Idea
	idea := &models.Idea{}

	// To find the Idea the parameter idea_id is used.
	if err := tx.Find(idea, c.Param("idea_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, idea))
}

// New renders the form for creating a new Idea.
// This function is mapped to the path GET /ideas/new
func (v IdeasResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Idea{}))
}

// Create adds a Idea to the DB. This function is mapped to the
// path POST /ideas
func (v IdeasResource) Create(c buffalo.Context) error {
	// Allocate an empty Idea
	idea := &models.Idea{}

	// Bind idea to the html form elements
	if err := c.Bind(idea); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	idea.SuggestedBy = c.Value("current_user").(*models.User).Username
	val, err := redisClient.Get("game-currentversion").Result()
	if err != nil {
		log.Print(err)
	}
	idea.VersionWhenSuggested = val

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(idea)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, idea))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "idea.created.success"))
	// and redirect to the ideas index page
	return c.Render(201, r.Auto(c, idea))
}

// Edit renders a edit form for a Idea. This function is
// mapped to the path GET /ideas/{idea_id}/edit
func (v IdeasResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Idea
	idea := &models.Idea{}

	if err := tx.Find(idea, c.Param("idea_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, idea))
}

// Update changes a Idea in the DB. This function is mapped to
// the path PUT /ideas/{idea_id}
func (v IdeasResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Idea
	idea := &models.Idea{}

	if err := tx.Find(idea, c.Param("idea_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Idea to the html form elements
	if err := c.Bind(idea); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(idea)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, idea))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "idea.updated.success"))
	// and redirect to the ideas index page
	return c.Render(200, r.Auto(c, idea))
}

func UpvoteIdea(c buffalo.Context) error {

	user := c.Value("current_user").(*models.User)

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Idea
	idea := &models.Idea{}

	if err := tx.Find(idea, c.Param("idea_id")); err != nil {
		return c.Error(404, err)
	}

	_, alreadyUpvoted := idea.UpvotedBy[user.Username]
	_, alreadyDownvoted := idea.DownvotedBy[user.Username]

	if alreadyUpvoted {
		delete(idea.UpvotedBy, user.Username)
		verrs, err := tx.ValidateAndUpdate(idea)
		if err != nil {
			return err
		}

		if verrs.HasAny() {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			return c.Render(422, r.Auto(c, idea))
		}
		// If there are no errors set a success message
		c.Flash().Add("danger", "Upvote taken back")
		// and redirect to the ideas index page
		return c.Redirect(302, "/ideas")
	} else if alreadyDownvoted {
		delete(idea.DownvotedBy, user.Username)
		idea.UpvotedBy[user.Username] = user.Username
	} else {
		idea.UpvotedBy[user.Username] = user.Username
	}

	verrs, err := tx.ValidateAndUpdate(idea)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, idea))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Idea successfully upvoted")
	// and redirect to the ideas index page
	return c.Redirect(302, "/ideas")
}

func DownvoteIdea(c buffalo.Context) error {

	user := c.Value("current_user").(*models.User)

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Idea
	idea := &models.Idea{}

	if err := tx.Find(idea, c.Param("idea_id")); err != nil {
		return c.Error(404, err)
	}

	_, alreadyUpvoted := idea.UpvotedBy[user.Username]
	_, alreadyDownvoted := idea.DownvotedBy[user.Username]

	if alreadyUpvoted {
		delete(idea.UpvotedBy, user.Username)
		idea.DownvotedBy[user.Username] = user.Username
	} else if alreadyDownvoted {
		delete(idea.DownvotedBy, user.Username)
		verrs, err := tx.ValidateAndUpdate(idea)
		if err != nil {
			return err
		}

		if verrs.HasAny() {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			return c.Render(422, r.Auto(c, idea))
		}
		// If there are no errors set a success message
		c.Flash().Add("danger", "Downvote taken back")
		// and redirect to the ideas index page
		return c.Redirect(302, "/ideas")
	} else {
		idea.DownvotedBy[user.Username] = user.Username
	}

	verrs, err := tx.ValidateAndUpdate(idea)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, idea))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Idea successfully downvoted")
	// and redirect to the ideas index page
	return c.Redirect(302, "/ideas")
}

// Destroy deletes a Idea from the DB. This function is mapped
// to the path DELETE /ideas/{idea_id}
func (v IdeasResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Idea
	idea := &models.Idea{}

	// To find the Idea the parameter idea_id is used.
	if err := tx.Find(idea, c.Param("idea_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(idea); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "idea.destroyed.success"))
	// Redirect to the ideas index page
	return c.Render(200, r.Auto(c, idea))
}

// IdeasViewall default implementation.
// func IdeasViewall(c buffalo.Context) error {
// 	return c.Render(200, r.HTML("ideas/viewall.html"))
// }

func IdeasViewall(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	allIdeas := &models.Ideas{}

	tx.Order("created_at DESC")

	// Retrieve all Ideas from the DB
	if err := tx.All(allIdeas); err != nil {
		return err
	}

	c.Set("all_ideas", allIdeas)

	return c.Render(200, r.HTML("ideas/viewall.html"))
}
